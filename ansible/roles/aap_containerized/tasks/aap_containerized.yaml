---
- name: Register subscription for RHEL
  when: ansible_os_family == 'RedHat'
  community.general.redhat_subscription:
    username: "{{ lookup('env', 'RHN_USERNAME') }}"
    password: "{{ lookup('env', 'RHN_PASSWORD') }}"


# - name: Update RHEL-based systems
#   when: ansible_os_family == 'RedHat'
#   ansible.builtin.dnf:
#     name: '*'
#     state: latest
#     update_cache: true
#     update_only: true

- name: Validate required environment variables
  ansible.builtin.fail:
    msg: "Required environment variable {{ item }} is not set or is empty"
  when: (lookup('env', item) | default('')) | length == 0
  loop:
    - AAP_ADMIN_PASSWORD
    - RHN_REGISTRY_SVC
    - RHN_REGISTRY_TOKEN
    - RHN_USERNAME
    - RHN_PASSWORD
    - RHSM_OFFLINE_TOKEN
    - RHSM_ALLOCATION_UUID



 # create aap user  adduser aap
- name: Create AAP user
  ansible.builtin.user:
    name: aap
    password: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') | password_hash('sha512') }}"
    shell: /bin/bash
    create_home: true
    home: /home/aap
    state: present
  become: true
  register: aap_user


# add aap user to sudoers but don't make root
- name: Add AAP user to wheel group
  ansible.builtin.user:
    name: aap
    groups: wheel
    append: true
  become: true

- name: Configure passwordless sudo for aap user
  ansible.builtin.lineinfile:
    path: /etc/sudoers.d/aap-access
    line: "aap ALL=(ALL) NOPASSWD: ALL"
    create: yes
    mode: '0440'
    validate: 'visudo -cf %s'
  become: true

- name: Install Podman
  ansible.builtin.dnf:
    name: container-tools
    state: present
  become: true
  register: podman_install

- name: Install Podman
  ansible.builtin.dnf:
    name: podman-docker
    state: present
  become: true
  register: podman_docker

- name: Validate login to Red Hat Registry
  ansible.builtin.command:
    cmd: "podman login registry.redhat.io -u \"{{ lookup('env', 'RHN_REGISTRY_SVC') }}\" --password \"{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}\""
  become: true
  no_log: false # To avoid logging the token
  register: podman_login_result
  changed_when: podman_login_result.rc == 0
  failed_when: podman_login_result.rc != 0 and "already logged in" not in podman_login_result.stderr # Don't fail if already logged in

- name: Debug Podman Login
  ansible.builtin.debug:
    var: podman_login_result

# test image pull podman pull registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9
- name: Pull Ansible Automation Platform image
  ansible.builtin.command:
    cmd: "loginctl enable-linger 1001; sudo -iu aap podman pull registry.redhat.io/ansible-automation-platform-25/ee-supported-rhel9"
  become: true
  register: podman_pull_result
  changed_when: podman_pull_result.rc == 0


- name: Debug Podman Pull
  ansible.builtin.debug:
    var: podman_pull_result

- name: Enable repository management for RHEL
  when: ansible_os_family == 'RedHat'
  ansible.builtin.command:
    cmd: subscription-manager config --rhsm.manage_repos=1
  register: rhsm_manage_repos
  changed_when: rhsm_manage_repos.rc != 0

- name: Install required packages
  block:
    - name: Install packages
      ansible.builtin.dnf:
        name:
          - ansible-core
          - wget
          - git-core
          - rsync
          - vim
          - jq
          - curl
        state: present
      become: true

- name: Get RHSM access token
  ansible.builtin.uri:
    url: "https://sso.redhat.com/auth/realms/redhat-external/protocol/openid-connect/token"
    method: POST
    body_format: form-urlencoded
    body:
      grant_type: refresh_token
      client_id: rhsm-api
      refresh_token: "{{ lookup('env', 'RHSM_OFFLINE_TOKEN') }}"
    status_code: 200
  register: rhsm_token
  no_log: false

- name: Request manifest export
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/export"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/json"
    status_code: 200
  register: manifest_download_id

- name: Debug - Show manifest download result
  ansible.builtin.debug:
    var: manifest_download_id

- name: Poll for manifest readiness
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/exportJob/{{ manifest_download_id.json.body.exportJobID }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/json"
    status_code: 200
  register: poll_result
  until: poll_result.status == 200
  retries: 15
  delay: 5
  changed_when: false

- name: Debug - Show poll result
  ansible.builtin.debug:
    var: poll_result

- name: Check manifest export status
  ansible.builtin.debug:
    msg: "Manifest export status: {{ poll_result.json }}"

- name: Download manifest file
  ansible.builtin.uri:
    url: "https://api.access.redhat.com/management/v1/allocations/{{ lookup('env', 'RHSM_ALLOCATION_UUID') }}/export/{{ poll_result.json.body.exportID }}"
    method: GET
    headers:
      Authorization: "Bearer {{ rhsm_token.json.access_token }}"
      Accept: "application/zip"
    dest: "/tmp/manifest_AAP_Demo.zip"
    force: true
  register: manifest_file

- name: Debug - Show manifest file download result
  ansible.builtin.debug:
    var: manifest_file

- name: Download Ansible Automation Platform setup file
  ansible.builtin.get_url:
    url: "https://github.com/Hashi-RedHat-APJ-Collab/AAP-2.5-containerized-on-AWS/raw/refs/heads/main/post_data/ansible-automation-platform-containerized-setup-2.5-13.tar.gz"
    dest: /tmp/ansible-automation-platform-containerized-setup-2.5-13.tar.gz
  register: download_result

- name: Get information about downloaded file
  ansible.builtin.stat: 
    path: "/tmp/ansible-automation-platform-containerized-setup-2.5-13.tar.gz"
  register: file_info

- name: Debug - Show file info
  ansible.builtin.debug:
    var: file_info

- name: Manually extract the installer
  ansible.builtin.command:
    cmd: "tar xfvz /tmp/ansible-automation-platform-containerized-setup-2.5-13.tar.gz -C /tmp/"
  register: extract_result

# - name: Debug - Show extract result
#   ansible.builtin.debug:
#     var: extract_result

- name: Find the top-level extracted directory matching the expected pattern
  ansible.builtin.find:
    paths: "/tmp/"
    patterns: "ansible-automation-platform-containerized-setup-*"
    file_type: directory
    recurse: false
  register: extracted_dir

# - name: Set the extracted directory path
#   ansible.builtin.debug:
#     msg: "{{ extracted_dir.files }}"

- name: Set AAP hostname
  ansible.builtin.set_fact:
    aap_hostname: "{{ aap_hostname | default('aap.example.org') }}"

- name: Update inventory file with template
  ansible.builtin.template:
    src: inventory-growth.j2
    dest: "/tmp/inventory-growth"
    mode: '0644'
  vars:
    new_install_password: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
    ansible_become_pass: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
    registry_password: "{{ lookup('env', 'RHN_REGISTRY_TOKEN') }}"

# check if the inventory file was created
- name: Check if inventory file exists
  ansible.builtin.stat:
    path: "/tmp/inventory-growth"
  register: inventory_file

# output inventory file
- name: Debug - Show inventory file
  ansible.builtin.shell: cat /tmp/inventory-growth
  register: result
  
- name: Show file content
  ansible.builtin.debug:
    msg: "{{ result.stdout }}"

- name: Set the system hostname for the AAP installer
  become: true
  ansible.builtin.command: hostnamectl set-hostname {{ aap_hostname }}

- name: Add entry to /etc/hosts for {{ aap_hostname }}
  ansible.builtin.lineinfile:
    path: /etc/hosts
    line: "127.0.0.1 {{ aap_hostname }}"
    state: present
    create: true
    backup: true
  become: true

- name: Test Red Hat registry connectivity
  ansible.builtin.uri:
    url: https://registry.redhat.io
    method: GET
    status_code: 200 # Expect a 200 OK response
    validate_certs: false # Set to true if you want to validate SSL certs
  register: uri_result
  ignore_errors: true

- name: Display URI result
  ansible.builtin.debug:
    msg: "URI access result for registry.redhat.io: {{ uri_result }}"


- name: Run AAP installer playbook
  ansible.builtin.shell:
    cmd: |
      sudo loginctl enable-linger 1001
      sudo loginctl enable-linger aap
      cd /tmp/ansible-automation-platform-containerized-setup-2.5-13
      sudo -iu aap ansible-playbook -v -i /tmp/inventory-growth ansible.containerized_installer.install
  become: true
  environment:
    ANSIBLE_HOST_KEY_CHECKING: "False"
    ANSIBLE_BECOME_PASS: "{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}"
  register: install_result

# - name: Run AAP installer playbook
#   ansible.builtin.command:
#     cmd: sudo -u aap bash -lc "cd /tmp/ansible-automation-platform-containerized-setup-2.5-13; ANSIBLE_HOST_KEY_CHECKING=False ANSIBLE_BECOME_PASS='{{ lookup('env', 'AAP_ADMIN_PASSWORD') }}' ansible-playbook -i /tmp/inventory-growth ansible.containerized_installer.install"
#   become_user: aap
#   register: install_result

- name: Check if the installation was successful
  ansible.builtin.debug:
    msg: "{{ install_result }}"